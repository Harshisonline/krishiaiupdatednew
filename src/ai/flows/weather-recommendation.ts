'use server';
/**
 * @fileOverview Provides weather information and farmer-specific recommendations.
 *
 * - getWeatherWithRecommendations - Fetches weather data and generates recommendations.
 * - WeatherRecommendationInput - Input type for the flow.
 * - WeatherRecommendationOutput - Output type for the flow.
 */

import {ai} from '@/ai/ai-instance';
import {z} from 'genkit';
import type { WeatherData as ExternalWeatherData } from '@/services/weather'; // Assuming this is the external service's data type

const WeatherRecommendationInputSchema = z.object({
  location: z.string().describe('The location for which to fetch weather data (e.g., "New York, US", "Paris, FR").'),
});
export type WeatherRecommendationInput = z.infer<typeof WeatherRecommendationInputSchema>;

const WeatherRecommendationOutputSchema = z.object({
  locationName: z.string().describe("The name of the location."),
  temperature: z.number().describe("Current temperature in Celsius."),
  feelsLike: z.number().describe("What the temperature feels like in Celsius."),
  condition: z.string().describe("General weather condition (e.g., Sunny, Cloudy)."),
  iconUrl: z.string().optional().describe("URL for a weather icon."),
  humidity: z.number().describe("Humidity percentage."),
  windSpeed: z.number().describe("Wind speed in km/h."),
  pressure: z.number().describe("Atmospheric pressure in mb."),
  uvIndex: z.number().optional().describe("UV index."),
  visibility: z.number().optional().describe("Visibility in km."),
  sunrise: z.string().optional().describe("Sunrise time in ISO 8601 format."),
  sunset: z.string().optional().describe("Sunset time in ISO 8601 format."),
  farmerRecommendations: z.array(z.string()).describe("Actionable recommendations for farmers based on the current weather conditions.").optional(),
});
export type WeatherRecommendationOutput = z.infer<typeof WeatherRecommendationOutputSchema>;


// Mock tool to simulate fetching weather data from an external service
const getExternalWeatherDataTool = ai.defineTool(
  {
    name: 'getExternalWeatherData',
    description: 'Fetches current weather data for a given location from an external weather service.',
    inputSchema: WeatherRecommendationInputSchema,
    outputSchema: z.object({ // This schema should match the output of your actual weather service/mock
        locationName: z.string(),
        temperature: z.number(),
        feelsLike: z.number(),
        condition: z.string(),
        iconUrl: z.string().optional(),
        humidity: z.number(),
        windSpeed: z.number(),
        pressure: z.number(),
        uvIndex: z.number().optional(),
        visibility: z.number().optional(),
        sunrise: z.string().optional(),
        sunset: z.string().optional(),
    }),
  },
  async (input: WeatherRecommendationInput): Promise<ExternalWeatherData> => {
    // In a real application, this would call the actual weather service
    // For now, using the mock data approach similar to services/weather.ts
    console.log(`[Tool:getExternalWeatherData] Fetching weather for: ${input.location}`);
     if (input.location.toLowerCase().includes("error")) {
        throw new Error("Mock API error from tool: Could not fetch weather for this location.");
    }
    const mockTemp = 20 + Math.floor(Math.random() * 15 - 7); // Temp between 13-34 C
    return {
        locationName: input.location.split(',')[0].trim(),
        temperature: mockTemp,
        feelsLike: mockTemp - 2 + Math.floor(Math.random() * 4),
        condition: ["Sunny", "Partly Cloudy", "Cloudy", "Light Rain", "Showers"][Math.floor(Math.random() * 5)],
        iconUrl: `https://picsum.photos/64/64?random=${Math.random()}`,
        humidity: 50 + Math.floor(Math.random() * 40 - 20), // 30-70%
        windSpeed: 5 + Math.floor(Math.random() * 20), // 5-24 km/h
        pressure: 1000 + Math.floor(Math.random() * 20 - 10), // 990-1010 mb
        uvIndex: Math.floor(Math.random() * 11),
        visibility: 5 + Math.floor(Math.random() * 15), // 5-19 km
        sunrise: new Date(Date.now() - 12 * 60 * 60 * 1000 + Math.random() * 60 * 60 * 1000).toISOString(),
        sunset: new Date(Date.now() + 2 * 60 * 60 * 1000 + Math.random() * 60 * 60 * 1000).toISOString(),
        // farmerRecommendations will be generated by the main prompt, not this tool
    };
  }
);


const weatherPrompt = ai.definePrompt({
  name: 'weatherRecommendationPrompt',
  input: { schema: WeatherRecommendationInputSchema }, // Input is just location
  output: { schema: WeatherRecommendationOutputSchema }, // Output includes recommendations
  tools: [getExternalWeatherDataTool],
  prompt: `You are an agricultural advisor AI.
First, use the 'getExternalWeatherData' tool to fetch the current weather conditions for the location: {{{location}}}.

Once you have the weather data, analyze it and provide:
1.  The weather details as per the output schema.
2.  A list of 2-3 concise, actionable recommendations for farmers in that location based *specifically* on the fetched weather conditions.
    Focus on immediate actions related to irrigation, pest control, crop protection (e.g., from frost, heat, heavy rain), or soil management.
    For example, if it's very hot and dry, recommend increased irrigation. If heavy rain is expected, suggest checking drainage. If frost is predicted, advise on protective measures.
    The recommendations should be directly useful for a farmer looking at today's weather.
    Populate the 'farmerRecommendations' field in the output. If no specific recommendations are pertinent or the weather is very mild, you can provide general advice like "Monitor crops closely." or leave it empty if truly nothing applies.
    Ensure your response strictly adheres to the output JSON schema.
`,
});


export async function getWeatherWithRecommendations(input: WeatherRecommendationInput): Promise<WeatherRecommendationOutput> {
  console.log('[Flow:getWeatherWithRecommendations] Starting for location:', input.location);
  try {
    const { output } = await weatherPrompt(input);
    if (!output) {
      throw new Error('Weather recommendation flow did not return an output.');
    }
    console.log('[Flow:getWeatherWithRecommendations] Received output:', output);
    return output;
  } catch (error) {
    console.error('[Flow:getWeatherWithRecommendations] Error:', error);
    // Consider a more specific error structure or logging for production
    throw new Error(`Failed to get weather and recommendations: ${error instanceof Error ? error.message : String(error)}`);
  }
}
